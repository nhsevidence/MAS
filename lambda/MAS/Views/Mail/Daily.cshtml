@using MAS.Models;
@using MAS.ViewModels;
@model DailyEmailViewModel
@{
    ViewData["Title"] = "MAS Daily";

    var groupedItems = Model.Items.GroupBy(x => x.EvidenceType.BroaderTitle).ToList();
}

@functions {
string getSpecialitiesListForMergeTag(IEnumerable<Speciality> specialites)
{
    return String.Join(',', specialites.Select(x => x.Title).Distinct());
}
}

<table class="spacer-heading">
    <tbody>
        <tr>
            <td height="16px" style="font-size:16px;line-height:16px;">
                <h3 class="articles-match">
                    *|INTERESTED:@Model.SpecialitiesGroupCategoryName:@getSpecialitiesListForMergeTag(Model.Items.SelectMany(x => x.Specialities))|*
                    Articles that match your chosen specialities today
                    *|ELSE:|*
                    No articles match your chosen specialities today
                    *|END:INTERESTED|*
                    - <a class="white-link" href="*|UPDATE_PROFILE|*">Edit your subscription</a>
                </h3>
            </td>
        </tr>
    </tbody>
</table>

@foreach (var group in groupedItems)
{
    @:*|INTERESTED:@Model.SpecialitiesGroupCategoryName:@getSpecialitiesListForMergeTag(group.SelectMany(x => x.Specialities))|*

    @await Html.PartialAsync("_Heading", group.Key)

    @foreach (var item in group)
    {
        @:*|INTERESTED:@Model.SpecialitiesGroupCategoryName:@getSpecialitiesListForMergeTag(item.Specialities)|*
        @await Html.PartialAsync("_Item", item)
        @:*|END:INTERESTED|*
    }
    @:*|END:INTERESTED|*
}


*|INTERESTED:@Model.EverythingGroupCategoryName:@Model.EverythingGroupName|*
<table class="spacer-heading">
    <tbody>
        <tr>
            <td height="16px" style="font-size:16px;line-height:16px;">
                <h3 class="articles-match">
                    All articles from Medicines awareness services: Daily edition
                </h3>
            </td>
        </tr>
    </tbody>
</table>

@foreach (var group in groupedItems)
{
    @await Html.PartialAsync("_Heading", group.Key)

    @foreach (var item in group)
    {
        @await Html.PartialAsync("_Item", item)
    }
}
*|END:INTERESTED|*
