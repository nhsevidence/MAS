@using MAS.Models;
@using MAS.ViewModels;
@using MAS.Configuration;
@inject MailConfig mailConfig
@model DailyEmailViewModel
@{
    var groupedItems = Model.Items
        .GroupBy(x => x.EvidenceType.BroaderTitle)
        .OrderBy(d => Array.IndexOf(mailConfig.EvidenceTypesOrdering, d.Key))
        .ToList();
}

@functions {
string getSpecialitiesListForMergeTag(IEnumerable<Speciality> specialites)
{
    return String.Join(',', specialites.Select(x => x.Title).Distinct().OrderBy(s => s));
}
}

<table class="row articles-match-container" bgcolor="#393939">
	<tbody>
		<tr>
			<td>
                <table>
                    <tr>
                        <td>
                            <div class="articles-match">
                                <div class="white-text">
                                    <a class="white-link" href="*|UPDATE_PROFILE|*">Edit your subscription</a>
                                </div>
                            </div>
                        </td>
                    </tr>
                </table>               
			</td>
		</tr>
	</tbody>
</table>

<table class="row articles-match-container" bgcolor="#393939">
	<tbody>
		<tr>
			<td>
                <table>
                    <tr>
                        <td>
                            <div class="articles-match">
                                <p class="white-text">
                                    *|INTERESTED:@Model.SpecialitiesGroupCategoryName:@getSpecialitiesListForMergeTag(Model.Items.SelectMany(x => x.Specialities))|*
                                    Articles that match your chosen specialities today
                                    *|ELSE:|*
                                    No articles match your chosen specialities today
                                    *|END:INTERESTED|*
                                    - 
                                    <a class="white-link" href="*|UPDATE_PROFILE|*"
                                        >Edit your subscription</a
                                    >
                                </p>
				            </div>
                        </td>
                    </tr>
                </table>               
			</td>
		</tr>
	</tbody>
</table>

@foreach (var group in groupedItems)
{
    @:*|INTERESTED:@Model.SpecialitiesGroupCategoryName:@getSpecialitiesListForMergeTag(group.SelectMany(x => x.Specialities))|*

    @await Html.PartialAsync("_Heading", group.Key)

    @foreach (var item in group)
    {
        @:*|INTERESTED:@Model.SpecialitiesGroupCategoryName:@getSpecialitiesListForMergeTag(item.Specialities)|*
        @await Html.PartialAsync("_Item", item)
        @:*|END:INTERESTED|*
    }
    @:*|END:INTERESTED|*
}


*|INTERESTED:@Model.EverythingGroupCategoryName:@Model.EverythingGroupName|*
<table class="row articles-match-container" bgcolor="#393939">
	<tbody>
		<tr>
			<td>
                <table>
                    <tr>
                        <td>
                            <div class="articles-match">
                                <p class="white-text">
                                    All articles from Medicines Awareness Service: Daily edition
                                </p>
				            </div>
                        </td>
                    </tr>
                </table>               
			</td>
		</tr>
	</tbody>
</table>

@foreach (var group in groupedItems)
{
    @await Html.PartialAsync("_Heading", group.Key)

    @foreach (var item in group)
    {
        @await Html.PartialAsync("_Item", item)
    }
}
*|END:INTERESTED|*
