# See https://github.com/SeleniumHQ/docker-selenium#via-docker-compose
version: '3.3'
services:
  firefox:
    container_name: mas-tests_firefox_1
    image: selenium/node-firefox:3.11.0-antimony
    volumes:
      - /dev/shm:/dev/shm
    depends_on:
      - hub
    environment:
      HUB_HOST: hub

  chrome:
    container_name: mas-tests_chrome_1
    image: selenium/node-chrome:3.141.59-20210713
    shm_size: '1gb'
    volumes:
      - /dev/shm:/dev/shm
    depends_on:
      - hub
    environment:
      - HUB_HOST=hub
      - HUB_PORT=4444
     
# Selenium Grid/Hub
  hub:
    container_name: mas-selenium_hub
    image: selenium/hub:3.141.59-20210713
    environment:
      GRID_DEBUG: "true"
      GRID_MAX_SESSION: 2
    ports:
     - "4444:4444"
    expose:
     - "4444"

  tests:
    container_name: functional-tests_tests_1
    build: .
    volumes:
      - ./:/tests
      - /tests/node_modules
    links:
      - hub
      - cms
    environment:
      - MAS_EMAIL
      - MAS_PASSWORD

  cms:
    container_name: cms
    build: ./../cms
    links:
      - mongo
      - s3backend
    ports:
      - 3010:3010
    environment:
      NODE_ENV: local
      PORT: 3010
      MONGO_URL: "mongodb://mongo:27017/mas-docker"
      COOKIE_SECRET: ${KEYSTONE_COOKIE_SECRET}
      KEYSTONE_ADMIN_EMAIL: ${KEYSTONE_ADMIN_EMAIL}
      KEYSTONE_ADMIN_PASSWORD: ${KEYSTONE_ADMIN_PASSWORD}
      HOST_NAME: ${HOST_NAME}
      CONTENT_PATH: "/api/content/"
      HOST_PORT: ${HOST_PORT}
      STATIC_SITE_PATH: ${STATIC_SITE_PATH}
    volumes:
      - ../cms:/app
      # Ignore node_modules from mounting to avoid binaries compiled on host machine architecture not working on docker machine: https://stackoverflow.com/a/37898591/486434
      # - /app/node_modules
    depends_on:
      - mongo

  # MongoDB for the CMS
  mongo:
    container_name: mongo
    image: mongo:4.2
    volumes:
     - ./mongodb-data:/data/db/mongo # - /path/from/host:/path/to/container
    command: --quiet # See https://stackoverflow.com/a/54696259/486434
    ports:
      - 27017:27017
  
   # Use minio to create a mock, local s3 bucket
  s3backend:
    image: minio/minio:latest
    container_name: s3backend
    ports:
      - 9000:9000
      - 9001:9001
    # entrypoint: sh
    command: server --address ":9000" --console-address ":9001" /data #-c 'tail -f /dev/null' #-c '/usr/bin/minio server /data'
    # Mount a volume from the host machine to persist files
    # Note: the $PWD var is a bash thing so this won't work in cmd on Windows
    volumes:
      - ../s3-mock/data:/data
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}

  # Mimick the public facing side of the S3 bucket to serve static pages and assets
  s3frontend:
    image: nginx
    container_name: s3frontend
    ports:
      - 8000:8000
    volumes:
      - ../nginx.conf:/etc/nginx/nginx.conf
      # Mount and serve both the static assets AND the generated HTML in the S3 bucket
      - ../s3-mock/data/demo-bucket:/usr/share/nginx/s3-html/
      - ../static-assets:/usr/share/nginx/static-html/
   
  nginx:
    container_name: functional-tests_nginx_1
    image: nginx:latest
    volumes:
      - ./docker_ssl_proxy:/etc/nginx
    ports:
      - 80:80
      - 443:443
    links:
      - cms
    networks:
      default:
        aliases:
          - keystone